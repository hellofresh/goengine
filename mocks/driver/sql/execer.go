// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hellofresh/goengine/driver/sql (interfaces: Execer)

// Package sql is a generated GoMock package.
package sql

import (
	context "context"
	sql "database/sql"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// Execer is a mock of Execer interface
type Execer struct {
	ctrl     *gomock.Controller
	recorder *ExecerMockRecorder
}

// ExecerMockRecorder is the mock recorder for Execer
type ExecerMockRecorder struct {
	mock *Execer
}

// NewExecer creates a new mock instance
func NewExecer(ctrl *gomock.Controller) *Execer {
	mock := &Execer{ctrl: ctrl}
	mock.recorder = &ExecerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Execer) EXPECT() *ExecerMockRecorder {
	return m.recorder
}

// ExecContext mocks base method
func (m *Execer) ExecContext(arg0 context.Context, arg1 string, arg2 ...interface{}) (sql.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecContext", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecContext indicates an expected call of ExecContext
func (mr *ExecerMockRecorder) ExecContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecContext", reflect.TypeOf((*Execer)(nil).ExecContext), varargs...)
}
