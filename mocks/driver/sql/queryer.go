// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hellofresh/goengine/driver/sql (interfaces: Queryer)

// Package sql is a generated GoMock package.
package sql

import (
	context "context"
	sql "database/sql"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// Queryer is a mock of Queryer interface
type Queryer struct {
	ctrl     *gomock.Controller
	recorder *QueryerMockRecorder
}

// QueryerMockRecorder is the mock recorder for Queryer
type QueryerMockRecorder struct {
	mock *Queryer
}

// NewQueryer creates a new mock instance
func NewQueryer(ctrl *gomock.Controller) *Queryer {
	mock := &Queryer{ctrl: ctrl}
	mock.recorder = &QueryerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Queryer) EXPECT() *QueryerMockRecorder {
	return m.recorder
}

// QueryContext mocks base method
func (m *Queryer) QueryContext(arg0 context.Context, arg1 string, arg2 ...interface{}) (*sql.Rows, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryContext", varargs...)
	ret0, _ := ret[0].(*sql.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryContext indicates an expected call of QueryContext
func (mr *QueryerMockRecorder) QueryContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryContext", reflect.TypeOf((*Queryer)(nil).QueryContext), varargs...)
}
