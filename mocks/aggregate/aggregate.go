// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hellofresh/goengine/v2/aggregate (interfaces: Root)

// Package aggregate is a generated GoMock package.
package aggregate

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	goengine "github.com/hellofresh/goengine/v2"
	aggregate "github.com/hellofresh/goengine/v2/aggregate"
)

// Root is a mock of Root interface.
type Root struct {
	ctrl     *gomock.Controller
	recorder *RootMockRecorder
}

// RootMockRecorder is the mock recorder for Root.
type RootMockRecorder struct {
	mock *Root
}

// NewRoot creates a new mock instance.
func NewRoot(ctrl *gomock.Controller) *Root {
	mock := &Root{ctrl: ctrl}
	mock.recorder = &RootMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Root) EXPECT() *RootMockRecorder {
	return m.recorder
}

// AggregateID mocks base method.
func (m *Root) AggregateID() aggregate.ID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AggregateID")
	ret0, _ := ret[0].(aggregate.ID)
	return ret0
}

// AggregateID indicates an expected call of AggregateID.
func (mr *RootMockRecorder) AggregateID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AggregateID", reflect.TypeOf((*Root)(nil).AggregateID))
}

// Apply mocks base method.
func (m *Root) Apply(arg0 *aggregate.Changed) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Apply", arg0)
}

// Apply indicates an expected call of Apply.
func (mr *RootMockRecorder) Apply(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*Root)(nil).Apply), arg0)
}

// popRecordedEvents mocks base method.
func (m *Root) popRecordedEvents() []*aggregate.Changed {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "popRecordedEvents")
	ret0, _ := ret[0].([]*aggregate.Changed)
	return ret0
}

// popRecordedEvents indicates an expected call of popRecordedEvents.
func (mr *RootMockRecorder) popRecordedEvents() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "popRecordedEvents", reflect.TypeOf((*Root)(nil).popRecordedEvents))
}

// recordThat mocks base method.
func (m *Root) recordThat(arg0 aggregate.EventApplier, arg1 *aggregate.Changed) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "recordThat", arg0, arg1)
}

// recordThat indicates an expected call of recordThat.
func (mr *RootMockRecorder) recordThat(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "recordThat", reflect.TypeOf((*Root)(nil).recordThat), arg0, arg1)
}

// replay mocks base method.
func (m *Root) replay(arg0 aggregate.EventApplier, arg1 goengine.EventStream) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "replay", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// replay indicates an expected call of replay.
func (mr *RootMockRecorder) replay(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "replay", reflect.TypeOf((*Root)(nil).replay), arg0, arg1)
}
