// Code generated by goengine. DO NOT EDIT.
package inmemory

import (
	"errors"
	"reflect"

	"github.com/hellofresh/goengine/metadata"
)

var ErrUnsupportedType = errors.New("the value is not a scalar type")

func asScalar(value interface{}) (interface{}, error) {
	switch value.(type) {
	case int,
		int8,
		int16,
		int32,
		int64,
		uint,
		uint8,
		uint16,
		uint32,
		uint64,
		float32,
		float64,
		string,
		bool,
		complex64,
		complex128:
		return value, nil
	}

	switch reflect.TypeOf(value).Kind() {
	case reflect.Int:
		var v int
		return reflect.ValueOf(value).Convert(reflect.TypeOf(v)).Interface(), nil
	case reflect.Int8:
		var v int8
		return reflect.ValueOf(value).Convert(reflect.TypeOf(v)).Interface(), nil
	case reflect.Int16:
		var v int16
		return reflect.ValueOf(value).Convert(reflect.TypeOf(v)).Interface(), nil
	case reflect.Int32:
		var v int32
		return reflect.ValueOf(value).Convert(reflect.TypeOf(v)).Interface(), nil
	case reflect.Int64:
		var v int64
		return reflect.ValueOf(value).Convert(reflect.TypeOf(v)).Interface(), nil
	case reflect.Uint:
		var v uint
		return reflect.ValueOf(value).Convert(reflect.TypeOf(v)).Interface(), nil
	case reflect.Uint8:
		var v uint8
		return reflect.ValueOf(value).Convert(reflect.TypeOf(v)).Interface(), nil
	case reflect.Uint16:
		var v uint16
		return reflect.ValueOf(value).Convert(reflect.TypeOf(v)).Interface(), nil
	case reflect.Uint32:
		var v uint32
		return reflect.ValueOf(value).Convert(reflect.TypeOf(v)).Interface(), nil
	case reflect.Uint64:
		var v uint64
		return reflect.ValueOf(value).Convert(reflect.TypeOf(v)).Interface(), nil
	case reflect.Float32:
		var v float32
		return reflect.ValueOf(value).Convert(reflect.TypeOf(v)).Interface(), nil
	case reflect.Float64:
		var v float64
		return reflect.ValueOf(value).Convert(reflect.TypeOf(v)).Interface(), nil
	case reflect.String:
		var v string
		return reflect.ValueOf(value).Convert(reflect.TypeOf(v)).Interface(), nil
	case reflect.Bool:
		var v bool
		return reflect.ValueOf(value).Convert(reflect.TypeOf(v)).Interface(), nil
	case reflect.Complex64:
		var v complex64
		return reflect.ValueOf(value).Convert(reflect.TypeOf(v)).Interface(), nil
	case reflect.Complex128:
		var v complex128
		return reflect.ValueOf(value).Convert(reflect.TypeOf(v)).Interface(), nil
	}

	return nil, ErrUnsupportedType
}

func isSupportedOperator(value interface{}, operator metadata.Operator) bool {
	switch operator {
	case metadata.Equals,
		metadata.NotEquals:
		switch value.(type) {
		case int,
			int8,
			int16,
			int32,
			int64,
			uint,
			uint8,
			uint16,
			uint32,
			uint64,
			float32,
			float64,
			string,
			bool,
			complex64,
			complex128:
			return true
		}
	case metadata.GreaterThan,
		metadata.GreaterThanEquals,
		metadata.LowerThan,
		metadata.LowerThanEquals:
		switch value.(type) {
		case int,
			int8,
			int16,
			int32,
			int64,
			uint,
			uint8,
			uint16,
			uint32,
			uint64,
			float32,
			float64,
			string:
			return true
		}
	}

	return false
}

func (c *metadataConstraint) compareValue(lValue interface{}) (bool, error) {
	switch rVal := c.value.(type) {
	case int:
		if lVal, valid := lValue.(int); valid {
			return compareInt(rVal, c.operator, lVal)
		}
		return false, ErrTypeMismatch
	case int8:
		if lVal, valid := lValue.(int8); valid {
			return compareInt8(rVal, c.operator, lVal)
		}
		return false, ErrTypeMismatch
	case int16:
		if lVal, valid := lValue.(int16); valid {
			return compareInt16(rVal, c.operator, lVal)
		}
		return false, ErrTypeMismatch
	case int32:
		if lVal, valid := lValue.(int32); valid {
			return compareInt32(rVal, c.operator, lVal)
		}
		return false, ErrTypeMismatch
	case int64:
		if lVal, valid := lValue.(int64); valid {
			return compareInt64(rVal, c.operator, lVal)
		}
		return false, ErrTypeMismatch
	case uint:
		if lVal, valid := lValue.(uint); valid {
			return compareUint(rVal, c.operator, lVal)
		}
		return false, ErrTypeMismatch
	case uint8:
		if lVal, valid := lValue.(uint8); valid {
			return compareUint8(rVal, c.operator, lVal)
		}
		return false, ErrTypeMismatch
	case uint16:
		if lVal, valid := lValue.(uint16); valid {
			return compareUint16(rVal, c.operator, lVal)
		}
		return false, ErrTypeMismatch
	case uint32:
		if lVal, valid := lValue.(uint32); valid {
			return compareUint32(rVal, c.operator, lVal)
		}
		return false, ErrTypeMismatch
	case uint64:
		if lVal, valid := lValue.(uint64); valid {
			return compareUint64(rVal, c.operator, lVal)
		}
		return false, ErrTypeMismatch
	case float32:
		if lVal, valid := lValue.(float32); valid {
			return compareFloat32(rVal, c.operator, lVal)
		}
		return false, ErrTypeMismatch
	case float64:
		if lVal, valid := lValue.(float64); valid {
			return compareFloat64(rVal, c.operator, lVal)
		}
		return false, ErrTypeMismatch
	case string:
		if lVal, valid := lValue.(string); valid {
			return compareString(rVal, c.operator, lVal)
		}
		return false, ErrTypeMismatch
	case bool:
		if lVal, valid := lValue.(bool); valid {
			return compareBool(rVal, c.operator, lVal)
		}
		return false, ErrTypeMismatch
	case complex64:
		if lVal, valid := lValue.(complex64); valid {
			return compareComplex64(rVal, c.operator, lVal)
		}
		return false, ErrTypeMismatch
	case complex128:
		if lVal, valid := lValue.(complex128); valid {
			return compareComplex128(rVal, c.operator, lVal)
		}
		return false, ErrTypeMismatch
	}

	return false, ErrUnsupportedType
}

func compareInt(rValue int, operator metadata.Operator, lValue int) (bool, error) {
	switch operator {
	case metadata.Equals:
		return rValue == lValue, nil
	case metadata.NotEquals:
		return rValue != lValue, nil
	case metadata.GreaterThan:
		return rValue > lValue, nil
	case metadata.GreaterThanEquals:
		return rValue >= lValue, nil
	case metadata.LowerThan:
		return rValue < lValue, nil
	case metadata.LowerThanEquals:
		return rValue <= lValue, nil
	}

	return false, ErrUnsupportedOperator
}

func compareInt8(rValue int8, operator metadata.Operator, lValue int8) (bool, error) {
	switch operator {
	case metadata.Equals:
		return rValue == lValue, nil
	case metadata.NotEquals:
		return rValue != lValue, nil
	case metadata.GreaterThan:
		return rValue > lValue, nil
	case metadata.GreaterThanEquals:
		return rValue >= lValue, nil
	case metadata.LowerThan:
		return rValue < lValue, nil
	case metadata.LowerThanEquals:
		return rValue <= lValue, nil
	}

	return false, ErrUnsupportedOperator
}

func compareInt16(rValue int16, operator metadata.Operator, lValue int16) (bool, error) {
	switch operator {
	case metadata.Equals:
		return rValue == lValue, nil
	case metadata.NotEquals:
		return rValue != lValue, nil
	case metadata.GreaterThan:
		return rValue > lValue, nil
	case metadata.GreaterThanEquals:
		return rValue >= lValue, nil
	case metadata.LowerThan:
		return rValue < lValue, nil
	case metadata.LowerThanEquals:
		return rValue <= lValue, nil
	}

	return false, ErrUnsupportedOperator
}

func compareInt32(rValue int32, operator metadata.Operator, lValue int32) (bool, error) {
	switch operator {
	case metadata.Equals:
		return rValue == lValue, nil
	case metadata.NotEquals:
		return rValue != lValue, nil
	case metadata.GreaterThan:
		return rValue > lValue, nil
	case metadata.GreaterThanEquals:
		return rValue >= lValue, nil
	case metadata.LowerThan:
		return rValue < lValue, nil
	case metadata.LowerThanEquals:
		return rValue <= lValue, nil
	}

	return false, ErrUnsupportedOperator
}

func compareInt64(rValue int64, operator metadata.Operator, lValue int64) (bool, error) {
	switch operator {
	case metadata.Equals:
		return rValue == lValue, nil
	case metadata.NotEquals:
		return rValue != lValue, nil
	case metadata.GreaterThan:
		return rValue > lValue, nil
	case metadata.GreaterThanEquals:
		return rValue >= lValue, nil
	case metadata.LowerThan:
		return rValue < lValue, nil
	case metadata.LowerThanEquals:
		return rValue <= lValue, nil
	}

	return false, ErrUnsupportedOperator
}

func compareUint(rValue uint, operator metadata.Operator, lValue uint) (bool, error) {
	switch operator {
	case metadata.Equals:
		return rValue == lValue, nil
	case metadata.NotEquals:
		return rValue != lValue, nil
	case metadata.GreaterThan:
		return rValue > lValue, nil
	case metadata.GreaterThanEquals:
		return rValue >= lValue, nil
	case metadata.LowerThan:
		return rValue < lValue, nil
	case metadata.LowerThanEquals:
		return rValue <= lValue, nil
	}

	return false, ErrUnsupportedOperator
}

func compareUint8(rValue uint8, operator metadata.Operator, lValue uint8) (bool, error) {
	switch operator {
	case metadata.Equals:
		return rValue == lValue, nil
	case metadata.NotEquals:
		return rValue != lValue, nil
	case metadata.GreaterThan:
		return rValue > lValue, nil
	case metadata.GreaterThanEquals:
		return rValue >= lValue, nil
	case metadata.LowerThan:
		return rValue < lValue, nil
	case metadata.LowerThanEquals:
		return rValue <= lValue, nil
	}

	return false, ErrUnsupportedOperator
}

func compareUint16(rValue uint16, operator metadata.Operator, lValue uint16) (bool, error) {
	switch operator {
	case metadata.Equals:
		return rValue == lValue, nil
	case metadata.NotEquals:
		return rValue != lValue, nil
	case metadata.GreaterThan:
		return rValue > lValue, nil
	case metadata.GreaterThanEquals:
		return rValue >= lValue, nil
	case metadata.LowerThan:
		return rValue < lValue, nil
	case metadata.LowerThanEquals:
		return rValue <= lValue, nil
	}

	return false, ErrUnsupportedOperator
}

func compareUint32(rValue uint32, operator metadata.Operator, lValue uint32) (bool, error) {
	switch operator {
	case metadata.Equals:
		return rValue == lValue, nil
	case metadata.NotEquals:
		return rValue != lValue, nil
	case metadata.GreaterThan:
		return rValue > lValue, nil
	case metadata.GreaterThanEquals:
		return rValue >= lValue, nil
	case metadata.LowerThan:
		return rValue < lValue, nil
	case metadata.LowerThanEquals:
		return rValue <= lValue, nil
	}

	return false, ErrUnsupportedOperator
}

func compareUint64(rValue uint64, operator metadata.Operator, lValue uint64) (bool, error) {
	switch operator {
	case metadata.Equals:
		return rValue == lValue, nil
	case metadata.NotEquals:
		return rValue != lValue, nil
	case metadata.GreaterThan:
		return rValue > lValue, nil
	case metadata.GreaterThanEquals:
		return rValue >= lValue, nil
	case metadata.LowerThan:
		return rValue < lValue, nil
	case metadata.LowerThanEquals:
		return rValue <= lValue, nil
	}

	return false, ErrUnsupportedOperator
}

func compareFloat32(rValue float32, operator metadata.Operator, lValue float32) (bool, error) {
	switch operator {
	case metadata.Equals:
		return rValue == lValue, nil
	case metadata.NotEquals:
		return rValue != lValue, nil
	case metadata.GreaterThan:
		return rValue > lValue, nil
	case metadata.GreaterThanEquals:
		return rValue >= lValue, nil
	case metadata.LowerThan:
		return rValue < lValue, nil
	case metadata.LowerThanEquals:
		return rValue <= lValue, nil
	}

	return false, ErrUnsupportedOperator
}

func compareFloat64(rValue float64, operator metadata.Operator, lValue float64) (bool, error) {
	switch operator {
	case metadata.Equals:
		return rValue == lValue, nil
	case metadata.NotEquals:
		return rValue != lValue, nil
	case metadata.GreaterThan:
		return rValue > lValue, nil
	case metadata.GreaterThanEquals:
		return rValue >= lValue, nil
	case metadata.LowerThan:
		return rValue < lValue, nil
	case metadata.LowerThanEquals:
		return rValue <= lValue, nil
	}

	return false, ErrUnsupportedOperator
}

func compareString(rValue string, operator metadata.Operator, lValue string) (bool, error) {
	switch operator {
	case metadata.Equals:
		return rValue == lValue, nil
	case metadata.NotEquals:
		return rValue != lValue, nil
	case metadata.GreaterThan:
		return rValue > lValue, nil
	case metadata.GreaterThanEquals:
		return rValue >= lValue, nil
	case metadata.LowerThan:
		return rValue < lValue, nil
	case metadata.LowerThanEquals:
		return rValue <= lValue, nil
	}

	return false, ErrUnsupportedOperator
}

func compareBool(rValue bool, operator metadata.Operator, lValue bool) (bool, error) {
	switch operator {
	case metadata.Equals:
		return rValue == lValue, nil
	case metadata.NotEquals:
		return rValue != lValue, nil
	}

	return false, ErrUnsupportedOperator
}

func compareComplex64(rValue complex64, operator metadata.Operator, lValue complex64) (bool, error) {
	switch operator {
	case metadata.Equals:
		return rValue == lValue, nil
	case metadata.NotEquals:
		return rValue != lValue, nil
	}

	return false, ErrUnsupportedOperator
}

func compareComplex128(rValue complex128, operator metadata.Operator, lValue complex128) (bool, error) {
	switch operator {
	case metadata.Equals:
		return rValue == lValue, nil
	case metadata.NotEquals:
		return rValue != lValue, nil
	}

	return false, ErrUnsupportedOperator
}
