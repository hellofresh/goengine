// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gogo_account_deposited.proto

package internal

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type GogoAccountDeposited struct {
	Amount int32 `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *GogoAccountDeposited) Reset()      { *m = GogoAccountDeposited{} }
func (*GogoAccountDeposited) ProtoMessage() {}
func (*GogoAccountDeposited) Descriptor() ([]byte, []int) {
	return fileDescriptor_f93b31a1569655d5, []int{0}
}
func (m *GogoAccountDeposited) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GogoAccountDeposited) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GogoAccountDeposited.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GogoAccountDeposited) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GogoAccountDeposited.Merge(m, src)
}
func (m *GogoAccountDeposited) XXX_Size() int {
	return m.Size()
}
func (m *GogoAccountDeposited) XXX_DiscardUnknown() {
	xxx_messageInfo_GogoAccountDeposited.DiscardUnknown(m)
}

var xxx_messageInfo_GogoAccountDeposited proto.InternalMessageInfo

func (m *GogoAccountDeposited) GetAmount() int32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func init() {
	proto.RegisterType((*GogoAccountDeposited)(nil), "internal.GogoAccountDeposited")
}

func init() { proto.RegisterFile("gogo_account_deposited.proto", fileDescriptor_f93b31a1569655d5) }

var fileDescriptor_f93b31a1569655d5 = []byte{
	// 157 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x49, 0xcf, 0x4f, 0xcf,
	0x8f, 0x4f, 0x4c, 0x4e, 0xce, 0x2f, 0xcd, 0x2b, 0x89, 0x4f, 0x49, 0x2d, 0xc8, 0x2f, 0xce, 0x2c,
	0x49, 0x4d, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0xc8, 0xcc, 0x2b, 0x49, 0x2d, 0xca,
	0x4b, 0xcc, 0x51, 0xd2, 0xe3, 0x12, 0x71, 0xcf, 0x4f, 0xcf, 0x77, 0x84, 0x28, 0x74, 0x81, 0xa9,
	0x13, 0x12, 0xe3, 0x62, 0x4b, 0xcc, 0x05, 0x09, 0x49, 0x30, 0x2a, 0x30, 0x6a, 0xb0, 0x06, 0x41,
	0x79, 0x4e, 0x26, 0x17, 0x1e, 0xca, 0x31, 0xdc, 0x78, 0x28, 0xc7, 0xf0, 0xe1, 0xa1, 0x1c, 0x63,
	0xc3, 0x23, 0x39, 0xc6, 0x15, 0x8f, 0xe4, 0x18, 0x4f, 0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e,
	0xf1, 0xc1, 0x23, 0x39, 0xc6, 0x17, 0x8f, 0xe4, 0x18, 0x3e, 0x3c, 0x92, 0x63, 0x9c, 0xf0, 0x58,
	0x8e, 0xe1, 0xc2, 0x63, 0x39, 0x86, 0x1b, 0x8f, 0xe5, 0x18, 0x92, 0xd8, 0xc0, 0xd6, 0x1a, 0x03,
	0x02, 0x00, 0x00, 0xff, 0xff, 0x6d, 0x7b, 0x57, 0x4c, 0x96, 0x00, 0x00, 0x00,
}

func (this *GogoAccountDeposited) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GogoAccountDeposited)
	if !ok {
		that2, ok := that.(GogoAccountDeposited)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Amount != that1.Amount {
		return false
	}
	return true
}
func (this *GogoAccountDeposited) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&internal.GogoAccountDeposited{")
	s = append(s, "Amount: "+fmt.Sprintf("%#v", this.Amount)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringGogoAccountDeposited(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *GogoAccountDeposited) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GogoAccountDeposited) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Amount != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGogoAccountDeposited(dAtA, i, uint64(m.Amount))
	}
	return i, nil
}

func encodeVarintGogoAccountDeposited(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *GogoAccountDeposited) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Amount != 0 {
		n += 1 + sovGogoAccountDeposited(uint64(m.Amount))
	}
	return n
}

func sovGogoAccountDeposited(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGogoAccountDeposited(x uint64) (n int) {
	return sovGogoAccountDeposited(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GogoAccountDeposited) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GogoAccountDeposited{`,
		`Amount:` + fmt.Sprintf("%v", this.Amount) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringGogoAccountDeposited(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GogoAccountDeposited) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGogoAccountDeposited
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GogoAccountDeposited: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GogoAccountDeposited: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGogoAccountDeposited
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGogoAccountDeposited(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGogoAccountDeposited
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGogoAccountDeposited
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGogoAccountDeposited(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGogoAccountDeposited
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGogoAccountDeposited
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGogoAccountDeposited
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGogoAccountDeposited
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthGogoAccountDeposited
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGogoAccountDeposited
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGogoAccountDeposited(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthGogoAccountDeposited
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGogoAccountDeposited = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGogoAccountDeposited   = fmt.Errorf("proto: integer overflow")
)
