---
name: Testing

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v2
        with:
          only-new-issues: ${{ github.event_name == 'pull_request' }}

  go-test:
    name: Go ${{ matrix.go }} Test
    runs-on: ubuntu-latest
    needs: [ lint ]

    strategy:
      matrix:
        go: [ '1.17', '1.18', '1.19' ]

    services:
      postgres:
        image: postgres:10
        ports:
          - "5432"
        env:
          POSTGRES_USER: goengine
          POSTGRES_PASSWORD: goengine
          POSTGRES_DB: goengine
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go }}

      - name: Run unit tests
        run: make test-unit
      - name: Run examples tests
        run: make test-examples
      - name: Run integration tests
        run: make test-integration
        env:
          POSTGRES_DSN: postgres://goengine:goengine@localhost:${{ job.services.postgres.ports[5432] }}/goengine?sslmode=disable

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: [ go-test ]

    steps:
      - name: Done
        run: echo "All Golang versions tests are Green!"

  test-non-public-schema:
    name: Test non-public PG schema
    runs-on: ubuntu-latest
    needs: [ lint ]

    services:
      postgres:
        image: postgres:10
        ports:
          - "5432"
        env:
          POSTGRES_USER: goengine
          POSTGRES_PASSWORD: goengine
          POSTGRES_DB: goengine
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version-file: ./go.mod

      - name: Run unit tests
        run: make test-unit
      - name: Run examples tests
        run: make test-examples
      - name: Run integration tests
        run: make test-integration
        env:
          # integration tests suite creates new DB per test run and initialises schema as well
          POSTGRES_DSN: 'postgres://goengine:goengine@localhost:${{ job.services.postgres.ports[5432] }}/goengine?sslmode=disable&search_path=custom'
